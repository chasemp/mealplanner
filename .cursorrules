# MealPlanner Development Rules

## Data Schema Consistency - CRITICAL
When modifying data structures (ingredients, recipes, meals, scheduled meals), you MUST:

1. **Update ALL related components**:
   - Demo data generation (`js/demo-data.js` and `scripts/generate-demo-data.cjs`)
   - Filtering logic in managers (`js/recipe-manager.js`, `js/meal-manager.js`, etc.)
   - Label systems and dropdown populations
   - Search and sort functionality
   - UI display components

2. **Validate against test requirements**:
   - At least 20 ingredients for test compatibility
   - At least 10 basic recipes with diverse labels
   - All meal types (breakfast, lunch, dinner, snack) represented
   - Minimum 10 unique labels across all recipes
   - No `tags` property (consolidated to `labels`)
   - All required fields present and valid

3. **Ensure referential integrity**:
   - Recipe ingredients reference valid ingredient IDs
   - Meal recipes reference valid recipe IDs  
   - Scheduled meals reference valid meal/recipe IDs
   - All quantities are positive numbers
   - All dates are valid ISO strings

4. **Update validation and tests**:
   - Run `scripts/generate-demo-data.cjs --validate` after schema changes
   - Update test expectations in `src/test/unit/demo-data-validation.test.js`
   - Verify filtering still works with new data structure
   - Test label consistency across all data types

5. **Label system consistency**:
   - Labels must be shared across recipes and meals
   - Label types (ingredient_type, meal_type, recipe_combo) must be handled consistently
   - Dropdown filters must populate from actual data labels
   - Search functionality must work with new label structure

## Schema Change Workflow
1. Identify all affected components using semantic search
2. Update demo data generator first to validate new schema
3. Update all managers and UI components
4. Run comprehensive validation
5. Update tests to match new expectations
6. Verify filtering, searching, and sorting still work

## Testing Requirements
- Demo data must pass all validation rules
- All data types must be interconnected and valid
- Tests assume specific minimum quantities and structures
- Changes must not break existing test assumptions without updating tests

This rule prevents the data inconsistency bugs we've encountered and ensures holistic updates across the entire application when data structures change.